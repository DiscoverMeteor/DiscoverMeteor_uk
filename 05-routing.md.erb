---
title: Маршрутизація
slug: маршрутизація
date: 0005/01/01
number: 5
contents: Навчитесь маршрутизації в Meteor.|Створите сторінки обговорення посту з унікальними URL.|Навчитесь як правильно створювати ссилки на ці сторінки.
paragraphs: 72
---

Тепер ми маємо список постів (які будуть затверджуватись користувачем) і нам потрібна окрема сторінка посту, де наші користувачі зможуть обговорювати кожен пост.

Ми хотіли б, щоб ці сторінки були доступні через *постійну ссилку* -- URL у вигляді `http://myapp.com/posts/xyz` (де `xyz` - це `_id` ідентифікатор) унікальний для кожного посту. 

Це значить, що нам треба деяке *маршрутування* для того, щоб глянути що знаходиться в рядку пошуку браузера і видати відповідний правильний контент.

### Додавання пакету Iron Router

[Iron Router](https://github.com/EventedMind/iron-router) -- це пакет маршрутизації, розробленний спеціально для Meteor додатків. 

Він не тільки допомагає з маршрутизацією (встановленням шляхів), але також він може ставити фільтри (призначаючи деякі дії для цих шляхів) і даже управляти підписками (контроль який шлях має доступ до яких данних). (Занотуйте: Iron Router був розроблений за участі співавтором книги *Discover Meteor* Томом Коулманом.)

По-перше, давайте встановимо пакет з Atmosphere: 

~~~bash
$ mrt add iron-router
~~~
<%= caption "Terminal" %>

Ця команда завантажує і інсталює пакет iron-router в наш додаток, готовий до використання. Зверніть увагу, що інколи вам треба рестартувати ваш Meteor додаток (через `ctrl+c` для вбивства процесу, тоді `meteor` стартує його знову) перед використанням пакету.

Зверніть увагу, що Iron Router це пакет 3-ої сторони, що значить вам треба буде Meteorite для його установки (`meteor add iron-router` не спрацює).

<% note do %>

### Словник маршрутизатора

////

- ////
- ////
- ////
- ////
- ////
- ////
- ////
- ////

////

<% end %>

### Маршрутизація: прив’язка ссилок до шаблонів

////

////

////

<%= diagram "router-diagram", "Макети і шаблони.", "pull-center" %>

////

////

~~~html
<head>
  <title>Microscope</title>
</head>
~~~
<%= caption "client/main.html" %>

////

~~~html
<template name="layout">
  <div class="container">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="brand" href="/">Microscope</a>
    </div>
  </header>
  <div id="main" class="row-fluid">
    {{yield}}
  </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout'
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js"%>

////

<% note do %>

### The `/lib` folder

////

////

<% end %>

### Named Routes

////

////

////

////

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
  </div>
</header>

//...
~~~
<%= caption "client/views/application/layout.html"%>
<%= highlight "3" %>

<%= commit "5-1", "Very basic routing." %>

### Waiting on Data

////

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "3,4" %>

////

////

////

////

////

////

~~~html
<template name="loading">
  {{>spinner}}
</template>
~~~
<%= caption "client/views/includes/loading.html" %>

////

<%= commit "5-2", "Зачекайте підписки на пост." %>

<% note do %>

### Перший погляд на реактивність

////

////

////

<% end %>

### Маршрутизація до певного посту

////

////

////

~~~html
<template name="postPage">
  {{> postItem}}
</template>
~~~
<%= caption "client/views/posts/post_page.html" %>

////

////

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id'
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~6" %>

////

////

////

////

<%= diagram "router-diagram-2", "The data context.", "pull-center" %>

////

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~7" %>

////

////

<% note do %>

### Більше про контексти даних

////

////

~~~html
{{#each widgets}}
  {{> widgetItem}}
{{/each}}
~~~

////

~~~html
{{#with myWidget}}
  {{> widgetPage}}
{{/with}}
~~~

////

~~~js
{{> widgetPage myWidget}}
~~~

<% end %>

### Використання динамічно-іменного помічника маршруту

////

////

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html"%>
<%= highlight "6" %>
<%= commit "5-3", "Routing to a single post page." %>

////

////

////

////

////

<%= screenshot "5-2", "A single post page." %>

<% note do %>

### HTML5 pushState

////

////

////

<% end %>